// <auto-generated/>
#pragma warning disable
#nullable enable
namespace BigBazar.ViewModels
{
    /// <inheritdoc/>
    partial class AreaPageViewModel
    {
        /// <inheritdoc cref="areas"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public global::System.Collections.ObjectModel.ObservableCollection<global::BigBazar.Models.AreaDisplayable> Areas
        {
            get => areas;
            [global::System.Diagnostics.CodeAnalysis.MemberNotNull("areas")]
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<global::System.Collections.ObjectModel.ObservableCollection<global::BigBazar.Models.AreaDisplayable>>.Default.Equals(areas, value))
                {
                    OnAreasChanging(value);
                    OnAreasChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.Areas);
                    areas = value;
                    OnAreasChanged(value);
                    OnAreasChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.Areas);
                }
            }
        }

        /// <inheritdoc cref="selectedArea"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public global::BigBazar.Models.AreaDisplayable? SelectedArea
        {
            get => selectedArea;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<global::BigBazar.Models.AreaDisplayable?>.Default.Equals(selectedArea, value))
                {
                    OnSelectedAreaChanging(value);
                    OnSelectedAreaChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.SelectedArea);
                    selectedArea = value;
                    OnSelectedAreaChanged(value);
                    OnSelectedAreaChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.SelectedArea);
                }
            }
        }

        /// <inheritdoc cref="isRefreshing"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public bool IsRefreshing
        {
            get => isRefreshing;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<bool>.Default.Equals(isRefreshing, value))
                {
                    OnIsRefreshingChanging(value);
                    OnIsRefreshingChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.IsRefreshing);
                    isRefreshing = value;
                    OnIsRefreshingChanged(value);
                    OnIsRefreshingChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.IsRefreshing);
                }
            }
        }

        /// <summary>Executes the logic for when <see cref="Areas"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="Areas"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnAreasChanging(global::System.Collections.ObjectModel.ObservableCollection<global::BigBazar.Models.AreaDisplayable> value);
        /// <summary>Executes the logic for when <see cref="Areas"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="Areas"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnAreasChanging(global::System.Collections.ObjectModel.ObservableCollection<global::BigBazar.Models.AreaDisplayable>? oldValue, global::System.Collections.ObjectModel.ObservableCollection<global::BigBazar.Models.AreaDisplayable> newValue);
        /// <summary>Executes the logic for when <see cref="Areas"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="Areas"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnAreasChanged(global::System.Collections.ObjectModel.ObservableCollection<global::BigBazar.Models.AreaDisplayable> value);
        /// <summary>Executes the logic for when <see cref="Areas"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="Areas"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnAreasChanged(global::System.Collections.ObjectModel.ObservableCollection<global::BigBazar.Models.AreaDisplayable>? oldValue, global::System.Collections.ObjectModel.ObservableCollection<global::BigBazar.Models.AreaDisplayable> newValue);
        /// <summary>Executes the logic for when <see cref="SelectedArea"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="SelectedArea"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnSelectedAreaChanging(global::BigBazar.Models.AreaDisplayable? value);
        /// <summary>Executes the logic for when <see cref="SelectedArea"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="SelectedArea"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnSelectedAreaChanging(global::BigBazar.Models.AreaDisplayable? oldValue, global::BigBazar.Models.AreaDisplayable? newValue);
        /// <summary>Executes the logic for when <see cref="SelectedArea"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="SelectedArea"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnSelectedAreaChanged(global::BigBazar.Models.AreaDisplayable? value);
        /// <summary>Executes the logic for when <see cref="SelectedArea"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="SelectedArea"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnSelectedAreaChanged(global::BigBazar.Models.AreaDisplayable? oldValue, global::BigBazar.Models.AreaDisplayable? newValue);
        /// <summary>Executes the logic for when <see cref="IsRefreshing"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="IsRefreshing"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnIsRefreshingChanging(bool value);
        /// <summary>Executes the logic for when <see cref="IsRefreshing"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="IsRefreshing"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnIsRefreshingChanging(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="IsRefreshing"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="IsRefreshing"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnIsRefreshingChanged(bool value);
        /// <summary>Executes the logic for when <see cref="IsRefreshing"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="IsRefreshing"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnIsRefreshingChanged(bool oldValue, bool newValue);
    }
}